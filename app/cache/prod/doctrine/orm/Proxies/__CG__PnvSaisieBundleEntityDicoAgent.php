<?php

namespace Proxies\__CG__\Pnv\SaisieBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class DicoAgent extends \Pnv\SaisieBundle\Entity\DicoAgent implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Pnv\\SaisieBundle\\Entity\\DicoAgent' . "\0" . 'idUtilisateur', '' . "\0" . 'Pnv\\SaisieBundle\\Entity\\DicoAgent' . "\0" . 'loginAgent', '' . "\0" . 'Pnv\\SaisieBundle\\Entity\\DicoAgent' . "\0" . 'mdpAgent', '' . "\0" . 'Pnv\\SaisieBundle\\Entity\\DicoAgent' . "\0" . 'nomAgent', '' . "\0" . 'Pnv\\SaisieBundle\\Entity\\DicoAgent' . "\0" . 'prenomAgent', '' . "\0" . 'Pnv\\SaisieBundle\\Entity\\DicoAgent' . "\0" . 'idService');
        }

        return array('__isInitialized__', '' . "\0" . 'Pnv\\SaisieBundle\\Entity\\DicoAgent' . "\0" . 'idUtilisateur', '' . "\0" . 'Pnv\\SaisieBundle\\Entity\\DicoAgent' . "\0" . 'loginAgent', '' . "\0" . 'Pnv\\SaisieBundle\\Entity\\DicoAgent' . "\0" . 'mdpAgent', '' . "\0" . 'Pnv\\SaisieBundle\\Entity\\DicoAgent' . "\0" . 'nomAgent', '' . "\0" . 'Pnv\\SaisieBundle\\Entity\\DicoAgent' . "\0" . 'prenomAgent', '' . "\0" . 'Pnv\\SaisieBundle\\Entity\\DicoAgent' . "\0" . 'idService');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (DicoAgent $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getIdUtilisateur()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdUtilisateur();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdUtilisateur', array());

        return parent::getIdUtilisateur();
    }

    /**
     * {@inheritDoc}
     */
    public function setLoginAgent($loginAgent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLoginAgent', array($loginAgent));

        return parent::setLoginAgent($loginAgent);
    }

    /**
     * {@inheritDoc}
     */
    public function getLoginAgent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLoginAgent', array());

        return parent::getLoginAgent();
    }

    /**
     * {@inheritDoc}
     */
    public function setMdpAgent($mdpAgent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMdpAgent', array($mdpAgent));

        return parent::setMdpAgent($mdpAgent);
    }

    /**
     * {@inheritDoc}
     */
    public function getMdpAgent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMdpAgent', array());

        return parent::getMdpAgent();
    }

    /**
     * {@inheritDoc}
     */
    public function setNomAgent($nomAgent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNomAgent', array($nomAgent));

        return parent::setNomAgent($nomAgent);
    }

    /**
     * {@inheritDoc}
     */
    public function getNomAgent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNomAgent', array());

        return parent::getNomAgent();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrenomAgent($prenomAgent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrenomAgent', array($prenomAgent));

        return parent::setPrenomAgent($prenomAgent);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrenomAgent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrenomAgent', array());

        return parent::getPrenomAgent();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdService(\Pnv\SaisieBundle\Entity\DicoService $idService = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdService', array($idService));

        return parent::setIdService($idService);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdService()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdService', array());

        return parent::getIdService();
    }

}
